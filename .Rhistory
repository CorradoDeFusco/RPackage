v2 <- length(unique(DfDSE$Students[i]))
values <- v2
# print(c(Nation))
# print(v2)
}
values
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
values <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
values <- c(ength(unique(DfDSE$Students[i])))
# print(c(Nation))
# print(v2)
}
values
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
values <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
values <- c(length(unique(DfDSE$Students[i])))
# print(c(Nation))
# print(v2)
}
values
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
values <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
values <- c(values,length(unique(DfDSE$Students[i])))
# print(c(Nation))
# print(v2)
}
values
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
Nations
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- c(unique(DfDSE$Nationality))
Nations
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
values <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
values <- c(values,length(unique(DfDSE$Students[i])))
}
names(values) <- Nations
values
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
Stuxnat <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
Stuxnat <- c(values,length(unique(DfDSE$Students[i])))
}
names(Stuxnat) <- Nations
Stuxnat
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
Stuxnat <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
Stuxnat <- c(values,length(unique(DfDSE$Students[i])))
}
names(Stuxnat) <- Nations
Stuxnat
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
values <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
values <- c(values,length(unique(DfDSE$Students[i])))
}
names(values) <- Nations
values
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
names(StdntPerNation) <- Nations
StdntPerNation
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
df <- data.frame(StdntPerNation, Nations)
df
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
df <- data.frame(LAND_ISO)
colnames(StdntPerNation, Nations)
total <- merge(MyData,df,by="Nations")
total
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
df <- data.frame(LAND_ISO)
colnames(df) <- "Nations"
total <- merge(MyData,df,by="Nations")
total
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
colnames(df) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df,by="Nations", all=TRUE)
total
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
colnames(df) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df,by="Nations", all=TRUE)
total[is.na(total)] <- 0
total
LAND_ISO <- c("AUT","BEL","BGR","HRV","CYP","CZE","DNK","EST","FIN","FRA","DEU","GRC","HUN","IRL","ITA","LVA","LTU","LUX","MLT","NLD","POL","PRT","ROU","SVK","SVN","ESP","SWE","GBR")
value <- runif(length(LAND_ISO), 1, 10)
value
data <- data.frame(LAND_ISO, value)
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
colnames(df) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df,by="Nations", all=TRUE)
total[is.na(total)] <- 0
v2 <- c(28*0)
dfj <- data.frame(LAND_ISO,v2, stringsAsFactors = FALSE)
total2 <- merge(MyData, dfj)
total2
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
colnames(df) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df,by="Nations", all=TRUE)
total[is.na(total)] <- 0
v2 <- c(28*0)
dfj <- data.frame(LAND_ISO,v2, stringsAsFactors = FALSE)
colnames(df) <- c("Nation", "StudentNumber")
total2 <- merge(MyData, dfj, by="Nation")
total2
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
colnames(df) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df,by="Nations", all=TRUE)
total[is.na(total)] <- 0
v2 <- c(28*0)
dfj <- data.frame(LAND_ISO,v2, stringsAsFactors = FALSE)
colnames(dfj) <- c("Nation", "StudentNumber")
total2 <- merge(MyData, dfj, by="Nation")
total2
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
colnames(df) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df, all=TRUE)
total[is.na(total)] <- 0
total
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
colnames(df) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df,by="Nation" all=TRUE)
total[is.na(total)] <- 0
total
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
colnames(MyData) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df,by="Nation" all=TRUE)
total[is.na(total)] <- 0
total
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
colnames(MyData) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- rbind(MyData,df)
#total[is.na(total)] <- 0
total
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
colnames(MyData) <- c("Students", "Nation")
MyData
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
colnames(MyData) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df,by.x="Nation", by.y="Nation", all=TRUE)
total[is.na(total)] <- 0
total
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
Nations <- unique(DfDSE$Nationality)
StdntPerNation <- vector()
for(Nation in Nations){
i <- DfDSE$Nationality == Nation
StdntPerNation <- c(StdntPerNation,length(unique(DfDSE$Students[i])))
}
#names(StdntPerNation) <- Nations
MyData <- data.frame(StdntPerNation, Nations)
colnames(MyData) <- c("Students", "Nation")
df <- data.frame(LAND_ISO)
colnames(df) <- "Nation"
total <- merge(MyData,df,by.x="Nation", by.y="Nation", all=TRUE)
total[is.na(total)] <- 0
g <- list(
scope = 'europe')
p <- plot_geo(total) %>%
add_trace(
z = ~Students, locations = ~Nation,
color = ~Students, colors = 'Purples'
) %>%
colorbar(title = "") %>%
layout(geo = g
)
p
installed.packages("Shiny")
install.packages("shiny")
library(shiny)
runExample("01_hello")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(sample)
library(sample)
runApp("App1")
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
#' Weighted Average
#'
#' Takes the list of students, calculates weighted average of all the courses of the students and computes the final degree classification
#' @param Students it's the list of students which you want to calculate the final degree classification
#' @return final degree classification
#' @export
#'
weightedaverage<- function (Students){
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/gradecalculator/FileDse.csv")
result<- vector()
for(Student in Students){
i <- DfDSE$Student == Student
scores<-DfDSE$Score[i]
cfu<-DfDSE$Cfu[i]
result<- c(result, weighted.mean(scores, cfu, na.rm = TRUE)*110/30)
}
return(result)
}
x <- vector()
x <- "Giorgia"
weightedaverage(x)
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
#' Weighted Average
#'
#' Takes the list of students, calculates weighted average of all the courses of the students and computes the final degree classification
#' @param Students it's the list of students which you want to calculate the final degree classification
#' @return final degree classification
#' @export
#'
weightedaverage<- function (Students){
DfDSE <- read.csv("https://raw.githubusercontent.com/unimi-dse/c34a5d0e/master/FileDse.csv")
result<- vector()
for(Student in Students){
i <- DfDSE$Student == Student
scores<-DfDSE$Score[i]
cfu<-DfDSE$Cfu[i]
result<- c(result, weighted.mean(scores, cfu, na.rm = TRUE)*110/30)
}
return(result)
}
x <- vector()
x <- "Giorgia"
weightedaverage(x)
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
shiny::runApp('App1')
runApp('App1')
shiny::runApp('App1')
runApp('App1')
shiny::runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
runApp('App1')
